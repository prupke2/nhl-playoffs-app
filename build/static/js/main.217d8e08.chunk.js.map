{"version":3,"sources":["assets/hockey_icon_large.png","components/PlayoffTree/Teams/Teams.jsx","components/PlayoffTree/DragTeamsArea/DragTeamsArea.jsx","components/PlayoffTree/PlayoffTree.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Teams","this","props","teams","map","team","index","key","seed","className","src","logo","alt","short","title","name","Component","DragTeamsArea","id","conference","React","memo","eastTeamByes","westTeamByes","eastTeamMatchups","westTeamMatchups","App","state","eastTeamByeChoices","Array","fill","westTeamByeChoices","currentTime","getTime","fetch","method","then","results","json","data","setState","time","hockeyIcon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,+C,8tFCuB5BC,G,6KAjBP,OAAOC,KAAKC,MAAMC,MAAMA,MAAMC,KAAI,SAACC,EAAMC,GACrC,OACI,wBAAIC,IAAKF,EAAKG,KAAMC,UAAS,mCAA8BH,IACvD,yBAAKG,UAAU,QACVJ,EAAKG,MAEV,yBAAKC,UAAU,WACXC,IAAKL,EAAKM,KACVC,IAAKP,EAAKQ,MACVC,MAAOT,EAAKU,e,GAZhBC,cCoBLC,G,YApBO,SAACf,GAEnB,OACI,4BACI,wBAAIgB,GAAE,UAAKhB,EAAMiB,WAAX,aAAmCV,UAAS,sBAAiBP,EAAMiB,aACrE,yBAAKV,UAAU,aAAf,MAEJ,wBAAIS,GAAE,UAAKhB,EAAMiB,WAAX,aAAmCV,UAAS,sBAAiBP,EAAMiB,aACrE,yBAAKV,UAAU,aAAf,MAEJ,wBAAIS,GAAE,UAAKhB,EAAMiB,WAAX,aAAmCV,UAAS,sBAAiBP,EAAMiB,aACrE,yBAAKV,UAAU,aAAf,MAEJ,wBAAIS,GAAE,UAAKhB,EAAMiB,WAAX,aAAmCV,UAAS,sBAAiBP,EAAMiB,aACrE,yBAAKV,UAAU,aAAf,SC6BDW,MAAMC,MAzCD,SAACnB,GAGnB,OACC,yBAAKO,UAAU,sBACd,6BAASA,UAAU,YAClB,4BACC,kBAAC,EAAD,CACCN,MAAOD,EAAMoB,gBAGd,kBAAC,EAAD,CACCH,WAAW,SAEb,4BACC,kBAAC,EAAD,CACChB,MAAOD,EAAMqB,gBAGd,kBAAC,EAAD,CACCJ,WAAW,UAId,6BAASV,UAAU,eAClB,4BACC,kBAAC,EAAD,CACCN,MAAOD,EAAMsB,oBAGf,4BACC,kBAAC,EAAD,CACCrB,MAAOD,EAAMuB,yB,8BCyCLC,G,kNAnEbC,MAAQ,CACNL,aAAcA,EACdC,aAAcA,EACdC,iBAAkBA,EAClBC,iBAAkBA,EAClBG,mBAAoB,IAAIC,MAAM,GAAGC,KAAK,MACtCC,mBAAoB,IAAIF,MAAM,GAAGC,KAAK,MACtCE,YAAa,I,EAGfC,QAAU,WACRC,MAAM,YAAa,CACjBC,OAAQ,QAETC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAACR,YAAaO,EAAKE,W,uDAS/C,OACE,yBAAKhC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKgC,IAAYjC,UAAU,OAAOG,IAAI,iBAE7C,8BACE,kBAAC,EAAD,CACEoB,YAAe/B,KAAK0B,MAAMK,YAC1BC,QAAWhC,KAAKgC,QAChBX,aAAgBrB,KAAK0B,MAAML,aAC3BE,iBAAoBvB,KAAK0B,MAAMH,iBAC/BD,aAAgBtB,KAAK0B,MAAMJ,aAC3BE,iBAAoBxB,KAAK0B,MAAMF,wB,gDAlBTvB,EAAOyB,GACrC,OAAOA,M,GArBOX,cCGE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.217d8e08.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hockey_icon_large.524e854a.png\";","import React, { Component } from 'react';\nimport './Teams.css';\n\nclass Teams extends Component {\n    \n    render() {\n        return this.props.teams.teams.map((team, index) => {\n            return (\n                <li key={team.seed} className={`teamWrapper matchup team-${index}`}>\n                    <div className=\"seed\">\n                        {team.seed}\n                    </div>\n                    <img className=\"teamLogo\" \n                        src={team.logo} \n                        alt={team.short} \n                        title={team.name}\n                    />\n                </li>\n              );\n        });\n    }\n}\n\nexport default Teams;\n","import React, { Component } from 'react';\nimport './DragTeamsArea.css';\n\nconst DragTeamsArea = (props) => {\n    \n    return (\n        <ul>\n            <li id={`${props.conference}-choice-1` } className={`teamWrapper ${props.conference}` }>\n                <div className=\"watermark\">1</div>\n            </li>\n            <li id={`${props.conference}-choice-2` } className={`teamWrapper ${props.conference}` }>\n                <div className=\"watermark\">2</div>\n            </li>\n            <li id={`${props.conference}-choice-3` } className={`teamWrapper ${props.conference}` }>\n                <div className=\"watermark\">3</div>\n            </li>\n            <li id={`${props.conference}-choice-4` } className={`teamWrapper ${props.conference}` }>\n                <div className=\"watermark\">4</div>\n            </li>\n        </ul>    \n    );\n}\n\nexport default DragTeamsArea;\n","import React from 'react';\nimport Teams from './Teams/Teams';\nimport './PlayoffTree.css';\nimport DragTeamsArea from './DragTeamsArea/DragTeamsArea';\n\nconst PlayoffTree = (props) => {\n\n    \n\t\treturn (\n\t\t\t<div className=\"PlayoffTreeWrapper\">\n\t\t\t\t<section className=\"ByeRound\">\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<Teams \n\t\t\t\t\t\t\tteams={props.eastTeamByes}>\n\t\t\t\t\t\t</Teams>\n\t\t\t\t\t</ul>\n\t\t\t\t\t\t<DragTeamsArea\n\t\t\t\t\t\t\tconference=\"east\">\n\t\t\t\t\t\t</DragTeamsArea>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<Teams\n\t\t\t\t\t\t\tteams={props.westTeamByes}>\n\t\t\t\t\t\t</Teams>\n\t\t\t\t\t</ul>\n\t\t\t\t\t\t<DragTeamsArea\n\t\t\t\t\t\t\tconference=\"west\">\n\t\t\t\t\t\t</DragTeamsArea>\t\t\t\n\t\t\t\t</section>\n\t\t\t\t\n\t\t\t\t<section className=\"PlayoffTree\">\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<Teams \n\t\t\t\t\t\t\tteams={props.eastTeamMatchups}>\n\t\t\t\t\t\t</Teams>\n\t\t\t\t\t</ul>\t\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<Teams \n\t\t\t\t\t\t\tteams={props.westTeamMatchups}>\n\t\t\t\t\t\t</Teams>\n\t\t\t\t\t</ul>\t\n\t\t\t\t</section>\n\t\t\t</div>\n\t\t);\n    \n}\n\nexport default React.memo(PlayoffTree);\n","import React, { Component} from 'react';\nimport hockeyIcon from './assets/hockey_icon_large.png';\nimport PlayoffTree from './components/PlayoffTree/PlayoffTree';\nimport eastTeamByes from './assets/eastTeamByes.json';\nimport westTeamByes from './assets/westTeamByes.json';\nimport eastTeamMatchups from './assets/eastTeamMatchups.json';\nimport westTeamMatchups from './assets/westTeamMatchups.json';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    eastTeamByes: eastTeamByes,\n    westTeamByes: westTeamByes,\n    eastTeamMatchups: eastTeamMatchups,\n    westTeamMatchups: westTeamMatchups,\n    eastTeamByeChoices: new Array(4).fill(null),\n    westTeamByeChoices: new Array(4).fill(null),\n    currentTime: \"\"\n  }\n\n  getTime = () => {\n    fetch('/api/time', {\n      method: 'GET',\n    })\n    .then(results => results.json())\n    .then(data => this.setState({currentTime: data.time}));\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return state;\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={hockeyIcon} className=\"logo\" alt=\"Hockey logo\" />\n        </header>\n        <main>\n          <PlayoffTree \n            currentTime = {this.state.currentTime}\n            getTime = {this.getTime}\n            eastTeamByes = {this.state.eastTeamByes}\n            eastTeamMatchups = {this.state.eastTeamMatchups}\n            westTeamByes = {this.state.westTeamByes}\n            westTeamMatchups = {this.state.westTeamMatchups}\n            >\n          </PlayoffTree> \n        </main> \n      </div>\n    );\n  };\n};\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={nhlLogo} className=\"Nhl-logo\" alt=\"NHL logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//       <PlayoffTree></PlayoffTree>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}